A estrutura de dados JSON (JavaScript Object Notation) é um formato leve de troca de dados que é fácil para os seres humanos lerem e escreverem, e fácil para as máquinas interpretarem e gerarem. Em Python, você pode trabalhar com JSON usando o módulo `json`. Este módulo fornece funções para codificar (serializar) e decodificar (desserializar) dados JSON.

Aqui estão as funções e métodos principais do módulo `json` em Python:

### Funções Principais

1. **json.dump(obj, fp, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)**
   - Serializa um objeto Python para um arquivo em formato JSON.
   - `obj`: O objeto Python a ser serializado.
   - `fp`: Um objeto de arquivo aberto para gravação (por exemplo, usando `open`).

2. **json.dumps(obj, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)**
   - Serializa um objeto Python para uma string em formato JSON.
   - `obj`: O objeto Python a ser serializado.

3. **json.load(fp, *, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)**
   - Desserializa dados JSON de um arquivo para um objeto Python.
   - `fp`: Um objeto de arquivo aberto para leitura.

4. **json.loads(s, *, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)**
   - Desserializa uma string contendo dados JSON para um objeto Python.
   - `s`: A string contendo dados JSON.

### Exemplos de Uso

#### Serialização de um Objeto Python para JSON

```python
import json

# Exemplo de um dicionário Python
data = {
    "nome": "João",
    "idade": 30,
    "cidade": "São Paulo"
}

# Serializando para uma string JSON
json_string = json.dumps(data)
print(json_string)

# Serializando para um arquivo JSON
with open("data.json", "w") as json_file:
    json.dump(data, json_file)
```

#### Desserialização de JSON para um Objeto Python

```python
import json

# String JSON
json_string = '{"nome": "João", "idade": 30, "cidade": "São Paulo"}'

# Desserializando para um dicionário Python
data = json.loads(json_string)
print(data)

# Desserializando de um arquivo JSON
with open("data.json", "r") as json_file:
    data = json.load(json_file)
    print(data)
```

### Argumentos e Personalizações

- `skipkeys`: Se True, ignora chaves que não são tipos básicos (str, int, float, bool, None).
- `ensure_ascii`: Se False, permite a saída de caracteres não-ASCII.
- `indent`: Especifica o espaçamento de indentação para tornar o JSON mais legível.
- `sort_keys`: Se True, ordena as chaves do dicionário.

Essas são as funcionalidades principais do módulo `json` em Python, que permitem trabalhar com dados no formato JSON de maneira eficiente e flexível.